##############################
# THIS FILE IS AUTOGENERATED #
#    DO NOT MANUALLY EDIT    #
##############################
name: '[flowey] OpenVMM PR'
on:
  workflow_dispatch:
    inputs:
      param0:
        description: Run with verbose output
        default: false
        required: false
        type: boolean
  pull_request:
    branches:
    - main
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
jobs:
  job0:
    name: build mdbook guide
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
    - run: echo "injected!"
      name: 🌼🥾 Bootstrap flowey
      shell: bash
    - run: |
        set -x
        i=0; while [ $i -lt 5 ] && ! sudo apt-get update; do let "i=i+1"; sleep 1; done;
        sudo apt-get -o DPkg::Lock::Timeout=60 install gcc -y
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        . "$HOME/.cargo/env"
        echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"
        rustup show
      if: runner.os == 'Linux'
      name: rustup (Linux)
      shell: bash
    - run: |
        set -x
        curl -sSfLo rustup-init.exe https://win.rustup.rs/x86_64 --output rustup-init
        ./rustup-init.exe -y
        echo "$USERPROFILE\\.cargo\\bin" >> $GITHUB_PATH
      if: runner.os == 'Windows' && runner.arch == 'X64'
      name: rustup (Windows X64)
      shell: bash
    - run: |
        set -x
        curl -sSfLo rustup-init.exe https://win.rustup.rs/aarch64 --output rustup-init
        ./rustup-init.exe -y
        echo "$USERPROFILE\\.cargo\\bin" >> $GITHUB_PATH
      if: runner.os == 'Windows' && runner.arch == 'ARM64'
      name: rustup (Windows ARM64)
      shell: bash
    - uses: actions/checkout@v4
      with:
        path: flowey_bootstrap
    - name: Build flowey
      run: CARGO_INCREMENTAL=0 RUSTC_BOOTSTRAP=1 RUSTFLAGS="-Z threads=8" cargo build -p flowey_hvlite --target x86_64-unknown-linux-gnu --profile flowey-ci
      working-directory: flowey_bootstrap
      shell: bash
    - name: Stage flowey artifact
      run: |
        mkdir ./flowey_bootstrap_temp
        mv ./.github/workflows/openvmm-pr.yaml ./flowey_bootstrap_temp/pipeline.yaml
        mv ./.github/workflows/openvmm-pr.json ./flowey_bootstrap_temp/pipeline.json
        mv target/x86_64-unknown-linux-gnu/flowey-ci/flowey_hvlite ./flowey_bootstrap_temp/flowey
      working-directory: flowey_bootstrap
      shell: bash
    - name: Copy flowey artifact
      run: |
        OutDirNormal=$(echo "${{ runner.temp }}/bootstrapped-flowey" | sed -e 's|\\|\/|g' -e 's|^\([A-Za-z]\)\:/\(.*\)|/\L\1\E/\2|')
        mkdir -p $OutDirNormal
        cp -r ./flowey_bootstrap_temp/* $OutDirNormal
      working-directory: flowey_bootstrap
      shell: bash
    - name: Cleanup staged flowey artifact
      run: rm -rf ./flowey_bootstrap_temp
      working-directory: flowey_bootstrap
      shell: bash
    - run: echo "${{ runner.temp }}/bootstrapped-flowey" >> $GITHUB_PATH
      shell: bash
      name: 🌼📦 Add flowey to PATH
    - name: 🌼🛫 Initialize job
      run: |
        AgentTempDirNormal="${{ runner.temp }}"
        AgentTempDirNormal=$(echo "$AgentTempDirNormal" | sed -e 's|\\|\/|g' -e 's|^\([A-Za-z]\)\:/\(.*\)|/\L\1\E/\2|')
        echo "AgentTempDirNormal=$AgentTempDirNormal" >> $GITHUB_ENV

        chmod +x $AgentTempDirNormal/bootstrapped-flowey/flowey

        echo '"debug"' | flowey v 0 'FLOWEY_LOG' --update-from-stdin
        echo "${{ runner.temp }}/work" | flowey v 0 '_internal_WORKING_DIR' --update-from-stdin --is-raw-string

        cat <<'EOF' | flowey v 0 'param0' --update-from-stdin
        ${{ inputs.param0 != '' && inputs.param0 || 'false' }}
        EOF
        mkdir -p "$AgentTempDirNormal/publish_artifacts/guide"
        echo "$AgentTempDirNormal/publish_artifacts/guide" | flowey v 0 'artifact_publish_from_guide' --update-from-stdin --is-raw-string
      shell: bash
    - name: 🌼🔎 Self-check YAML
      run: |-
        ESCAPED_AGENT_TEMPDIR=$(
        cat <<'EOF' | sed 's/\\/\\\\/g'
        ${{ runner.temp }}
        EOF
        )
        flowey pipeline github --check $ESCAPED_AGENT_TEMPDIR/bootstrapped-flowey/pipeline.yaml --out .github/workflows/openvmm-pr.yaml ci checkin-gates --config=pr --include-jobs 20
      shell: bash
    - name: check if hvlite needs to be cloned
      run: flowey e 0 flowey_lib_common::git_checkout 0
      shell: bash
    - run: |
        flowey v 0 'flowey_lib_common::git_checkout:1:flowey_lib_common/src/git_checkout.rs:470:46' --write-to-gh-env FLOWEY_CONDITION
      shell: bash
      name: 🌼❓ Write to 'FLOWEY_CONDITION'
    - run: |
        flowey v 0 'flowey_lib_common::git_checkout:0:flowey_lib_common/src/git_checkout.rs:469:80' --write-to-gh-env floweyvar1 --is-raw-string
      shell: bash
      name: 🌼 Write to 'floweyvar1'
      if: ${{ fromJSON(env.FLOWEY_CONDITION) }}
    - id: flowey_lib_common__git_checkout__1
      uses: actions/checkout@v4
      with:
        fetch-depth: '1'
        path: repo0
        persist-credentials: ${{ env.floweyvar1 }}
      name: checkout repo hvlite
      if: ${{ fromJSON(env.FLOWEY_CONDITION) }}
    - run: ${{ github.workspace }}
      shell: flowey v 0 'flowey_lib_common::git_checkout:4:flowey_lib_common/src/git_checkout.rs:524:31' --update-from-file {0} --is-raw-string
      name: 🌼 Read from 'github.workspace'
    - name: report cloned repo directories
      run: flowey e 0 flowey_lib_common::git_checkout 3
      shell: bash
    - name: resolve OpenVMM repo requests
      run: flowey e 0 flowey_lib_hvlite::git_checkout_openvmm_repo 0
      shell: bash
    - name: 🌼 write_into Var
      run: flowey e 0 flowey_lib_hvlite::_jobs::build_and_publish_guide 0
      shell: bash
    - name: create gh-release-download cache dir
      run: flowey e 0 flowey_lib_common::download_gh_release 0
      shell: bash
    - name: Pre-processing cache vars
      run: flowey e 0 flowey_lib_common::cache 4
      shell: bash
    - run: |
        flowey v 0 'flowey_lib_common::cache:10:flowey_lib_common/src/cache.rs:458:72' --write-to-gh-env floweyvar4 --is-raw-string
      shell: bash
      name: 🌼 Write to 'floweyvar4'
    - run: |
        flowey v 0 'flowey_lib_common::cache:9:flowey_lib_common/src/cache.rs:457:72' --write-to-gh-env floweyvar5 --is-raw-string
      shell: bash
      name: 🌼 Write to 'floweyvar5'
    - id: flowey_lib_common__cache__5
      uses: actions/cache@v4
      with:
        key: ${{ env.floweyvar4 }}
        path: ${{ env.floweyvar5 }}
      name: 'Restore cache: gh-release-download'
    - run: ${{ steps.flowey_lib_common__cache__5.outputs.cache-hit }}
      shell: flowey v 0 'flowey_lib_common::cache:12:flowey_lib_common/src/cache.rs:510:46' --update-from-file {0} --is-raw-string
      name: 🌼 Read from 'steps.flowey_lib_common__cache__5.outputs.cache-hit'
    - name: map Github cache-hit to flowey
      run: flowey e 0 flowey_lib_common::cache 6
      shell: bash
    - name: create gh cache dir
      run: flowey e 0 flowey_lib_common::download_gh_cli 0
      shell: bash
    - name: Pre-processing cache vars
      run: flowey e 0 flowey_lib_common::cache 0
      shell: bash
    - run: |
        flowey v 0 'flowey_lib_common::cache:2:flowey_lib_common/src/cache.rs:458:72' --write-to-gh-env floweyvar2 --is-raw-string
      shell: bash
      name: 🌼 Write to 'floweyvar2'
    - run: |
        flowey v 0 'flowey_lib_common::cache:1:flowey_lib_common/src/cache.rs:457:72' --write-to-gh-env floweyvar3 --is-raw-string
      shell: bash
      name: 🌼 Write to 'floweyvar3'
    - id: flowey_lib_common__cache__1
      uses: actions/cache@v4
      with:
        key: ${{ env.floweyvar2 }}
        path: ${{ env.floweyvar3 }}
      name: 'Restore cache: gh-cli'
    - run: ${{ steps.flowey_lib_common__cache__1.outputs.cache-hit }}
      shell: flowey v 0 'flowey_lib_common::cache:4:flowey_lib_common/src/cache.rs:510:46' --update-from-file {0} --is-raw-string
      name: 🌼 Read from 'steps.flowey_lib_common__cache__1.outputs.cache-hit'
    - name: map Github cache-hit to flowey
      run: flowey e 0 flowey_lib_common::cache 2
      shell: bash
    - name: installing gh
      run: flowey e 0 flowey_lib_common::download_gh_cli 1
      shell: bash
    - run: ${{ github.token }}
      shell: flowey v 0 'flowey_lib_hvlite::_jobs::cfg_common:0:flowey_lib_hvlite/src/_jobs/cfg_common.rs:92:36' --is-secret --update-from-file {0} --is-raw-string
      name: 🌼 Read from 'github.token'
    - name: setup gh cli
      run: flowey e 0 flowey_lib_common::use_gh_cli 0
      shell: bash
    - name: download artifacts from github releases
      run: flowey e 0 flowey_lib_common::download_gh_release 1
      shell: bash
    - name: checking if apt packages need to be installed
      run: flowey e 0 flowey_lib_common::install_apt_pkg 0
      shell: bash
    - name: installing `apt` packages
      run: flowey e 0 flowey_lib_common::install_apt_pkg 1
      shell: bash
    - name: unpack mdbook
      run: flowey e 0 flowey_lib_common::download_mdbook 0
      shell: bash
    - name: build HvLite guide (mdbook)
      run: flowey e 0 flowey_lib_hvlite::build_guide 0
      shell: bash
    - name: 🌼 write_into Var
      run: flowey e 0 flowey_lib_hvlite::artifact_guide::publish 0
      shell: bash
    - name: copying guide to artifact dir
      run: flowey e 0 flowey_lib_common::copy_to_artifact_dir 0
      shell: bash
    - name: 'validate cache entry: gh-release-download'
      run: flowey e 0 flowey_lib_common::cache 7
      shell: bash
    - name: 'validate cache entry: gh-cli'
      run: flowey e 0 flowey_lib_common::cache 3
      shell: bash
    - name: 🌼📦 Publish guide
      uses: actions/upload-artifact@v4
      with:
        name: guide
        path: ${{ runner.temp }}/publish_artifacts/guide/
  job1:
    name: build and check docs [x64-windows]
    runs-on:
    - self-hosted
    - 1ES.Pool=OpenVMM-GitHub-Win-Pool-WestUS3
    permissions:
      contents: read
      id-token: write
    steps:
    - run: echo "injected!"
      name: 🌼🥾 Bootstrap flowey
      shell: bash
    - run: |
        set -x
        i=0; while [ $i -lt 5 ] && ! sudo apt-get update; do let "i=i+1"; sleep 1; done;
        sudo apt-get -o DPkg::Lock::Timeout=60 install gcc -y
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        . "$HOME/.cargo/env"
        echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"
        rustup show
      if: runner.os == 'Linux'
      name: rustup (Linux)
      shell: bash
    - run: |
        set -x
        curl -sSfLo rustup-init.exe https://win.rustup.rs/x86_64 --output rustup-init
        ./rustup-init.exe -y
        echo "$USERPROFILE\\.cargo\\bin" >> $GITHUB_PATH
      if: runner.os == 'Windows' && runner.arch == 'X64'
      name: rustup (Windows X64)
      shell: bash
    - run: |
        set -x
        curl -sSfLo rustup-init.exe https://win.rustup.rs/aarch64 --output rustup-init
        ./rustup-init.exe -y
        echo "$USERPROFILE\\.cargo\\bin" >> $GITHUB_PATH
      if: runner.os == 'Windows' && runner.arch == 'ARM64'
      name: rustup (Windows ARM64)
      shell: bash
    - uses: actions/checkout@v4
      with:
        path: flowey_bootstrap
    - name: Build flowey
      run: CARGO_INCREMENTAL=0 RUSTC_BOOTSTRAP=1 RUSTFLAGS="-Z threads=8" cargo build -p flowey_hvlite --target x86_64-pc-windows-msvc --profile flowey-ci
      working-directory: flowey_bootstrap
      shell: bash
    - name: Stage flowey artifact
      run: |
        mkdir ./flowey_bootstrap_temp
        mv ./.github/workflows/openvmm-pr.yaml ./flowey_bootstrap_temp/pipeline.yaml
        mv ./.github/workflows/openvmm-pr.json ./flowey_bootstrap_temp/pipeline.json
        mv target/x86_64-pc-windows-msvc/flowey-ci/flowey_hvlite.exe ./flowey_bootstrap_temp/flowey.exe
      working-directory: flowey_bootstrap
      shell: bash
    - name: Copy flowey artifact
      run: |
        OutDirNormal=$(echo "${{ runner.temp }}/bootstrapped-flowey" | sed -e 's|\\|\/|g' -e 's|^\([A-Za-z]\)\:/\(.*\)|/\L\1\E/\2|')
        mkdir -p $OutDirNormal
        cp -r ./flowey_bootstrap_temp/* $OutDirNormal
      working-directory: flowey_bootstrap
      shell: bash
    - name: Cleanup staged flowey artifact
      run: rm -rf ./flowey_bootstrap_temp
      working-directory: flowey_bootstrap
      shell: bash
    - run: echo "${{ runner.temp }}/bootstrapped-flowey" >> $GITHUB_PATH
      shell: bash
      name: 🌼📦 Add flowey to PATH
    - name: 🌼🛫 Initialize job
      run: |
        AgentTempDirNormal="${{ runner.temp }}"
        AgentTempDirNormal=$(echo "$AgentTempDirNormal" | sed -e 's|\\|\/|g' -e 's|^\([A-Za-z]\)\:/\(.*\)|/\L\1\E/\2|')
        echo "AgentTempDirNormal=$AgentTempDirNormal" >> $GITHUB_ENV

        chmod +x $AgentTempDirNormal/bootstrapped-flowey/flowey.exe

        echo '"debug"' | flowey.exe v 1 'FLOWEY_LOG' --update-from-stdin
        echo "${{ runner.temp }}/work" | flowey.exe v 1 '_internal_WORKING_DIR' --update-from-stdin --is-raw-string

        cat <<'EOF' | flowey.exe v 1 'param0' --update-from-stdin
        ${{ inputs.param0 != '' && inputs.param0 || 'false' }}
        EOF
        mkdir -p "$AgentTempDirNormal/publish_artifacts/x64-windows-rustdoc"
        echo "${{ runner.temp }}\\publish_artifacts\\x64-windows-rustdoc" | flowey.exe v 1 'artifact_publish_from_x64-windows-rustdoc' --update-from-stdin --is-raw-string
      shell: bash
    - name: 🌼🔎 Self-check YAML
      run: |-
        ESCAPED_AGENT_TEMPDIR=$(
        cat <<'EOF' | sed 's/\\/\\\\/g'
        ${{ runner.temp }}
        EOF
        )
        flowey.exe pipeline github --check $ESCAPED_AGENT_TEMPDIR\\bootstrapped-flowey\\pipeline.yaml --out .github/workflows/openvmm-pr.yaml ci checkin-gates --config=pr --include-jobs 20
      shell: bash
    - name: check if hvlite needs to be cloned
      run: flowey.exe e 1 flowey_lib_common::git_checkout 0
      shell: bash
    - run: |
        flowey.exe v 1 'flowey_lib_common::git_checkout:1:flowey_lib_common/src/git_checkout.rs:470:46' --write-to-gh-env FLOWEY_CONDITION
      shell: bash
      name: 🌼❓ Write to 'FLOWEY_CONDITION'
    - run: |
        flowey.exe v 1 'flowey_lib_common::git_checkout:0:flowey_lib_common/src/git_checkout.rs:469:80' --write-to-gh-env floweyvar5 --is-raw-string
      shell: bash
      name: 🌼 Write to 'floweyvar5'
      if: ${{ fromJSON(env.FLOWEY_CONDITION) }}
    - id: flowey_lib_common__git_checkout__1
      uses: actions/checkout@v4
      with:
        fetch-depth: '1'
        path: repo0
        persist-credentials: ${{ env.floweyvar5 }}
      name: checkout repo hvlite
      if: ${{ fromJSON(env.FLOWEY_CONDITION) }}
    - run: ${{ github.workspace }}
      shell: flowey.exe v 1 'flowey_lib_common::git_checkout:4:flowey_lib_common/src/git_checkout.rs:524:31' --update-from-file {0} --is-raw-string
      name: 🌼 Read from 'github.workspace'
    - name: report cloned repo directories
      run: flowey.exe e 1 flowey_lib_common::git_checkout 3
      shell: bash
    - name: resolve OpenVMM repo requests
      run: flowey.exe e 1 flowey_lib_hvlite::git_checkout_openvmm_repo 0
      shell: bash
    - name: set '-Dwarnings' in .cargo/config.toml
      run: flowey.exe e 1 flowey_lib_hvlite::init_openvmm_cargo_config_deny_warnings 0
      shell: bash
    - name: create gh-release-download cache dir
      run: flowey.exe e 1 flowey_lib_common::download_gh_release 0
      shell: bash
    - name: Pre-processing cache vars
      run: flowey.exe e 1 flowey_lib_common::cache 4
      shell: bash
    - run: |
        flowey.exe v 1 'flowey_lib_common::cache:10:flowey_lib_common/src/cache.rs:458:72' --write-to-gh-env floweyvar3 --is-raw-string
      shell: bash
      name: 🌼 Write to 'floweyvar3'
    - run: |
        flowey.exe v 1 'flowey_lib_common::cache:9:flowey_lib_common/src/cache.rs:457:72' --write-to-gh-env floweyvar4 --is-raw-string
      shell: bash
      name: 🌼 Write to 'floweyvar4'
    - id: flowey_lib_common__cache__5
      uses: actions/cache@v4
      with:
        key: ${{ env.floweyvar3 }}
        path: ${{ env.floweyvar4 }}
      name: 'Restore cache: gh-release-download'
    - run: ${{ steps.flowey_lib_common__cache__5.outputs.cache-hit }}
      shell: flowey.exe v 1 'flowey_lib_common::cache:12:flowey_lib_common/src/cache.rs:510:46' --update-from-file {0} --is-raw-string
      name: 🌼 Read from 'steps.flowey_lib_common__cache__5.outputs.cache-hit'
    - name: map Github cache-hit to flowey
      run: flowey.exe e 1 flowey_lib_common::cache 6
      shell: bash
    - name: create gh cache dir
      run: flowey.exe e 1 flowey_lib_common::download_gh_cli 0
      shell: bash
    - name: Pre-processing cache vars
      run: flowey.exe e 1 flowey_lib_common::cache 0
      shell: bash
    - run: |
        flowey.exe v 1 'flowey_lib_common::cache:2:flowey_lib_common/src/cache.rs:458:72' --write-to-gh-env floweyvar1 --is-raw-string
      shell: bash
      name: 🌼 Write to 'floweyvar1'
    - run: |
        flowey.exe v 1 'flowey_lib_common::cache:1:flowey_lib_common/src/cache.rs:457:72' --write-to-gh-env floweyvar2 --is-raw-string
      shell: bash
      name: 🌼 Write to 'floweyvar2'
    - id: flowey_lib_common__cache__1
      uses: actions/cache@v4
      with:
        key: ${{ env.floweyvar1 }}
        path: ${{ env.floweyvar2 }}
      name: 'Restore cache: gh-cli'
    - run: ${{ steps.flowey_lib_common__cache__1.outputs.cache-hit }}
      shell: flowey.exe v 1 'flowey_lib_common::cache:4:flowey_lib_common/src/cache.rs:510:46' --update-from-file {0} --is-raw-string
      name: 🌼 Read from 'steps.flowey_lib_common__cache__1.outputs.cache-hit'
    - name: map Github cache-hit to flowey
      run: flowey.exe e 1 flowey_lib_common::cache 2
      shell: bash
    - name: installing gh
      run: flowey.exe e 1 flowey_lib_common::download_gh_cli 1
      shell: bash
    - run: ${{ github.token }}
      shell: flowey.exe v 1 'flowey_lib_hvlite::_jobs::cfg_common:0:flowey_lib_hvlite/src/_jobs/cfg_common.rs:92:36' --is-secret --update-from-file {0} --is-raw-string
      name: 🌼 Read from 'github.token'
    - name: setup gh cli
      run: flowey.exe e 1 flowey_lib_common::use_gh_cli 0
      shell: bash
    - name: download artifacts from github releases
      run: flowey.exe e 1 flowey_lib_common::download_gh_release 1
      shell: bash
    - name: unpack protoc
      run: flowey.exe e 1 flowey_lib_common::download_protoc 0
      shell: bash
    - name: report openvmm magicpath dir
      run: flowey.exe e 1 flowey_lib_hvlite::cfg_openvmm_magicpath 0
      shell: bash
    - name: symlink protoc
      run: flowey.exe e 1 flowey_lib_hvlite::init_openvmm_magicpath_protoc 0
      shell: bash
    - name: install Rust
      run: flowey.exe e 1 flowey_lib_common::install_rust 0
      shell: bash
    - name: unpack Microsoft.WSL.LxUtil.x64.zip
      run: flowey.exe e 1 flowey_lib_hvlite::download_lxutil 0
      shell: bash
    - name: move lxutil.dll into its magic folder
      run: flowey.exe e 1 flowey_lib_hvlite::init_openvmm_magicpath_lxutil 0
      shell: bash
    - name: detect active toolchain
      run: flowey.exe e 1 flowey_lib_common::install_rust 1
      shell: bash
    - name: report common cargo flags
      run: flowey.exe e 1 flowey_lib_common::cfg_cargo_common_flags 0
      shell: bash
    - name: construct cargo doc command
      run: flowey.exe e 1 flowey_lib_common::run_cargo_doc 0
      shell: bash
    - name: document repo for target x86_64-pc-windows-msvc
      run: flowey.exe e 1 flowey_lib_hvlite::build_rustdoc 0
      shell: bash
    - name: archive rustdoc dir
      run: flowey.exe e 1 flowey_lib_hvlite::artifact_rustdoc::publish 0
      shell: bash
    - name: 🌼 write_into Var
      run: flowey.exe e 1 flowey_lib_hvlite::artifact_rustdoc::publish 1
      shell: bash
    - name: copying rustdoc to artifact dir
      run: flowey.exe e 1 flowey_lib_common::copy_to_artifact_dir 0
      shell: bash
    - name: 'validate cache entry: gh-cli'
      run: flowey.exe e 1 flowey_lib_common::cache 3
      shell: bash
    - name: 'validate cache entry: gh-release-download'
      run: flowey.exe e 1 flowey_lib_common::cache 7
      shell: bash
    - name: 🌼📦 Publish x64-windows-rustdoc
      uses: actions/upload-artifact@v4
      with:
        name: x64-windows-rustdoc
        path: ${{ runner.temp }}/publish_artifacts/x64-windows-rustdoc/
  job2:
    name: build and check docs [x64-linux]
    runs-on:
    - self-hosted
    - 1ES.Pool=OpenVMM-GitHub-Linux-Pool-WestUS3
    permissions:
      contents: read
      id-token: write
    steps:
    - run: echo "injected!"
      name: 🌼🥾 Bootstrap flowey
      shell: bash
    - run: |
        set -x
        i=0; while [ $i -lt 5 ] && ! sudo apt-get update; do let "i=i+1"; sleep 1; done;
        sudo apt-get -o DPkg::Lock::Timeout=60 install gcc -y
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        . "$HOME/.cargo/env"
        echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"
        rustup show
      if: runner.os == 'Linux'
      name: rustup (Linux)
      shell: bash
    - run: |
        set -x
        curl -sSfLo rustup-init.exe https://win.rustup.rs/x86_64 --output rustup-init
        ./rustup-init.exe -y
        echo "$USERPROFILE\\.cargo\\bin" >> $GITHUB_PATH
      if: runner.os == 'Windows' && runner.arch == 'X64'
      name: rustup (Windows X64)
      shell: bash
    - run: |
        set -x
        curl -sSfLo rustup-init.exe https://win.rustup.rs/aarch64 --output rustup-init
        ./rustup-init.exe -y
        echo "$USERPROFILE\\.cargo\\bin" >> $GITHUB_PATH
      if: runner.os == 'Windows' && runner.arch == 'ARM64'
      name: rustup (Windows ARM64)
      shell: bash
    - uses: actions/checkout@v4
      with:
        path: flowey_bootstrap
    - name: Build flowey
      run: CARGO_INCREMENTAL=0 RUSTC_BOOTSTRAP=1 RUSTFLAGS="-Z threads=8" cargo build -p flowey_hvlite --target x86_64-unknown-linux-gnu --profile flowey-ci
      working-directory: flowey_bootstrap
      shell: bash
    - name: Stage flowey artifact
      run: |
        mkdir ./flowey_bootstrap_temp
        mv ./.github/workflows/openvmm-pr.yaml ./flowey_bootstrap_temp/pipeline.yaml
        mv ./.github/workflows/openvmm-pr.json ./flowey_bootstrap_temp/pipeline.json
        mv target/x86_64-unknown-linux-gnu/flowey-ci/flowey_hvlite ./flowey_bootstrap_temp/flowey
      working-directory: flowey_bootstrap
      shell: bash
    - name: Copy flowey artifact
      run: |
        OutDirNormal=$(echo "${{ runner.temp }}/bootstrapped-flowey" | sed -e 's|\\|\/|g' -e 's|^\([A-Za-z]\)\:/\(.*\)|/\L\1\E/\2|')
        mkdir -p $OutDirNormal
        cp -r ./flowey_bootstrap_temp/* $OutDirNormal
      working-directory: flowey_bootstrap
      shell: bash
    - name: Cleanup staged flowey artifact
      run: rm -rf ./flowey_bootstrap_temp
      working-directory: flowey_bootstrap
      shell: bash
    - run: echo "${{ runner.temp }}/bootstrapped-flowey" >> $GITHUB_PATH
      shell: bash
      name: 🌼📦 Add flowey to PATH
    - name: 🌼🛫 Initialize job
      run: |
        AgentTempDirNormal="${{ runner.temp }}"
        AgentTempDirNormal=$(echo "$AgentTempDirNormal" | sed -e 's|\\|\/|g' -e 's|^\([A-Za-z]\)\:/\(.*\)|/\L\1\E/\2|')
        echo "AgentTempDirNormal=$AgentTempDirNormal" >> $GITHUB_ENV

        chmod +x $AgentTempDirNormal/bootstrapped-flowey/flowey

        echo '"debug"' | flowey v 2 'FLOWEY_LOG' --update-from-stdin
        echo "${{ runner.temp }}/work" | flowey v 2 '_internal_WORKING_DIR' --update-from-stdin --is-raw-string

        cat <<'EOF' | flowey v 2 'param0' --update-from-stdin
        ${{ inputs.param0 != '' && inputs.param0 || 'false' }}
        EOF
        mkdir -p "$AgentTempDirNormal/publish_artifacts/x64-linux-rustdoc"
        echo "$AgentTempDirNormal/publish_artifacts/x64-linux-rustdoc" | flowey v 2 'artifact_publish_from_x64-linux-rustdoc' --update-from-stdin --is-raw-string
      shell: bash
    - name: 🌼🔎 Self-check YAML
      run: |-
        ESCAPED_AGENT_TEMPDIR=$(
        cat <<'EOF' | sed 's/\\/\\\\/g'
        ${{ runner.temp }}
        EOF
        )
        flowey pipeline github --check $ESCAPED_AGENT_TEMPDIR/bootstrapped-flowey/pipeline.yaml --out .github/workflows/openvmm-pr.yaml ci checkin-gates --config=pr --include-jobs 20
      shell: bash
    - name: check if hvlite needs to be cloned
      run: flowey e 2 flowey_lib_common::git_checkout 0
      shell: bash
    - run: |
        flowey v 2 'flowey_lib_common::git_checkout:1:flowey_lib_common/src/git_checkout.rs:470:46' --write-to-gh-env FLOWEY_CONDITION
      shell: bash
      name: 🌼❓ Write to 'FLOWEY_CONDITION'
    - run: |
        flowey v 2 'flowey_lib_common::git_checkout:0:flowey_lib_common/src/git_checkout.rs:469:80' --write-to-gh-env floweyvar5 --is-raw-string
      shell: bash
      name: 🌼 Write to 'floweyvar5'
      if: ${{ fromJSON(env.FLOWEY_CONDITION) }}
    - id: flowey_lib_common__git_checkout__1
      uses: actions/checkout@v4
      with:
        fetch-depth: '1'
        path: repo0
        persist-credentials: ${{ env.floweyvar5 }}
      name: checkout repo hvlite
      if: ${{ fromJSON(env.FLOWEY_CONDITION) }}
    - run: ${{ github.workspace }}
      shell: flowey v 2 'flowey_lib_common::git_checkout:4:flowey_lib_common/src/git_checkout.rs:524:31' --update-from-file {0} --is-raw-string
      name: 🌼 Read from 'github.workspace'
    - name: report cloned repo directories
      run: flowey e 2 flowey_lib_common::git_checkout 3
      shell: bash
    - name: resolve OpenVMM repo requests
      run: flowey e 2 flowey_lib_hvlite::git_checkout_openvmm_repo 0
      shell: bash
    - name: set '-Dwarnings' in .cargo/config.toml
      run: flowey e 2 flowey_lib_hvlite::init_openvmm_cargo_config_deny_warnings 0
      shell: bash
    - name: create gh-release-download cache dir
      run: flowey e 2 flowey_lib_common::download_gh_release 0
      shell: bash
    - name: Pre-processing cache vars
      run: flowey e 2 flowey_lib_common::cache 4
      shell: bash
    - run: |
        flowey v 2 'flowey_lib_common::cache:10:flowey_lib_common/src/cache.rs:458:72' --write-to-gh-env floweyvar3 --is-raw-string
      shell: bash
      name: 🌼 Write to 'floweyvar3'
    - run: |
        flowey v 2 'flowey_lib_common::cache:9:flowey_lib_common/src/cache.rs:457:72' --write-to-gh-env floweyvar4 --is-raw-string
      shell: bash
      name: 🌼 Write to 'floweyvar4'
    - id: flowey_lib_common__cache__5
      uses: actions/cache@v4
      with:
        key: ${{ env.floweyvar3 }}
        path: ${{ env.floweyvar4 }}
      name: 'Restore cache: gh-release-download'
    - run: ${{ steps.flowey_lib_common__cache__5.outputs.cache-hit }}
      shell: flowey v 2 'flowey_lib_common::cache:12:flowey_lib_common/src/cache.rs:510:46' --update-from-file {0} --is-raw-string
      name: 🌼 Read from 'steps.flowey_lib_common__cache__5.outputs.cache-hit'
    - name: map Github cache-hit to flowey
      run: flowey e 2 flowey_lib_common::cache 6
      shell: bash
    - name: create gh cache dir
      run: flowey e 2 flowey_lib_common::download_gh_cli 0
      shell: bash
    - name: Pre-processing cache vars
      run: flowey e 2 flowey_lib_common::cache 0
      shell: bash
    - run: |
        flowey v 2 'flowey_lib_common::cache:2:flowey_lib_common/src/cache.rs:458:72' --write-to-gh-env floweyvar1 --is-raw-string
      shell: bash
      name: 🌼 Write to 'floweyvar1'
    - run: |
        flowey v 2 'flowey_lib_common::cache:1:flowey_lib_common/src/cache.rs:457:72' --write-to-gh-env floweyvar2 --is-raw-string
      shell: bash
      name: 🌼 Write to 'floweyvar2'
    - id: flowey_lib_common__cache__1
      uses: actions/cache@v4
      with:
        key: ${{ env.floweyvar1 }}
        path: ${{ env.floweyvar2 }}
      name: 'Restore cache: gh-cli'
    - run: ${{ steps.flowey_lib_common__cache__1.outputs.cache-hit }}
      shell: flowey v 2 'flowey_lib_common::cache:4:flowey_lib_common/src/cache.rs:510:46' --update-from-file {0} --is-raw-string
      name: 🌼 Read from 'steps.flowey_lib_common__cache__1.outputs.cache-hit'
    - name: map Github cache-hit to flowey
      run: flowey e 2 flowey_lib_common::cache 2
      shell: bash
    - name: installing gh
      run: flowey e 2 flowey_lib_common::download_gh_cli 1
      shell: bash
    - run: ${{ github.token }}
      shell: flowey v 2 'flowey_lib_hvlite::_jobs::cfg_common:0:flowey_lib_hvlite/src/_jobs/cfg_common.rs:92:36' --is-secret --update-from-file {0} --is-raw-string
      name: 🌼 Read from 'github.token'
    - name: setup gh cli
      run: flowey e 2 flowey_lib_common::use_gh_cli 0
      shell: bash
    - name: download artifacts from github releases
      run: flowey e 2 flowey_lib_common::download_gh_release 1
      shell: bash
    - name: checking if apt packages need to be installed
      run: flowey e 2 flowey_lib_common::install_apt_pkg 0
      shell: bash
    - name: installing `apt` packages
      run: flowey e 2 flowey_lib_common::install_apt_pkg 1
      shell: bash
    - name: unpack protoc
      run: flowey e 2 flowey_lib_common::download_protoc 0
      shell: bash
    - name: report openvmm magicpath dir
      run: flowey e 2 flowey_lib_hvlite::cfg_openvmm_magicpath 0
      shell: bash
    - name: symlink protoc
      run: flowey e 2 flowey_lib_hvlite::init_openvmm_magicpath_protoc 0
      shell: bash
    - name: install Rust
      run: flowey e 2 flowey_lib_common::install_rust 0
      shell: bash
    - name: unpack Microsoft.WSL.LxUtil.x64.zip
      run: flowey e 2 flowey_lib_hvlite::download_lxutil 0
      shell: bash
    - name: move lxutil.dll into its magic folder
      run: flowey e 2 flowey_lib_hvlite::init_openvmm_magicpath_lxutil 0
      shell: bash
    - name: detect active toolchain
      run: flowey e 2 flowey_lib_common::install_rust 1
      shell: bash
    - name: report common cargo flags
      run: flowey e 2 flowey_lib_common::cfg_cargo_common_flags 0
      shell: bash
    - name: construct cargo doc command
      run: flowey e 2 flowey_lib_common::run_cargo_doc 0
      shell: bash
    - name: document repo for target x86_64-unknown-linux-gnu
      run: flowey e 2 flowey_lib_hvlite::build_rustdoc 0
      shell: bash
    - name: archive rustdoc dir
      run: flowey e 2 flowey_lib_hvlite::artifact_rustdoc::publish 0
      shell: bash
    - name: 🌼 write_into Var
      run: flowey e 2 flowey_lib_hvlite::artifact_rustdoc::publish 1
      shell: bash
    - name: copying rustdoc to artifact dir
      run: flowey e 2 flowey_lib_common::copy_to_artifact_dir 0
      shell: bash
    - name: 'validate cache entry: gh-cli'
      run: flowey e 2 flowey_lib_common::cache 3
      shell: bash
    - name: 'validate cache entry: gh-release-download'
      run: flowey e 2 flowey_lib_common::cache 7
      shell: bash
    - name: 🌼📦 Publish x64-linux-rustdoc
      uses: actions/upload-artifact@v4
      with:
        name: x64-linux-rustdoc
        path: ${{ runner.temp }}/publish_artifacts/x64-linux-rustdoc/
    - name: 🌼🧼 Redact bootstrap var db
      run: rm $AgentTempDirNormal/bootstrapped-flowey/job2.json
      shell: bash
    - name: 🌼🥾 Publish bootstrapped flowey
      uses: actions/upload-artifact@v4
      with:
        name: _internal-flowey-bootstrap-x86_64-linux-uid-1
        path: ${{ runner.temp }}/bootstrapped-flowey
  job3:
    name: publish openvmm.dev
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pages: write
    needs:
    - job1
    - job2
    - job0
    steps:
    - name: 🌼🥾 Download bootstrapped flowey
      uses: actions/download-artifact@v4
      with:
        name: _internal-flowey-bootstrap-x86_64-linux-uid-1
        path: ${{ runner.temp }}/bootstrapped-flowey
    - name: 🌼📦 Download guide
      uses: actions/download-artifact@v4
      with:
        name: guide
        path: ${{ runner.temp }}/used_artifacts/guide/
    - name: 🌼📦 Download x64-linux-rustdoc
      uses: actions/download-artifact@v4
      with:
        name: x64-linux-rustdoc
        path: ${{ runner.temp }}/used_artifacts/x64-linux-rustdoc/
    - name: 🌼📦 Download x64-windows-rustdoc
      uses: actions/download-artifact@v4
      with:
        name: x64-windows-rustdoc
        path: ${{ runner.temp }}/used_artifacts/x64-windows-rustdoc/
    - run: echo "${{ runner.temp }}/bootstrapped-flowey" >> $GITHUB_PATH
      shell: bash
      name: 🌼📦 Add flowey to PATH
    - name: 🌼🛫 Initialize job
      run: |
        AgentTempDirNormal="${{ runner.temp }}"
        AgentTempDirNormal=$(echo "$AgentTempDirNormal" | sed -e 's|\\|\/|g' -e 's|^\([A-Za-z]\)\:/\(.*\)|/\L\1\E/\2|')
        echo "AgentTempDirNormal=$AgentTempDirNormal" >> $GITHUB_ENV

        chmod +x $AgentTempDirNormal/bootstrapped-flowey/flowey

        echo '"debug"' | flowey v 3 'FLOWEY_LOG' --update-from-stdin
        echo "${{ runner.temp }}/work" | flowey v 3 '_internal_WORKING_DIR' --update-from-stdin --is-raw-string

        cat <<'EOF' | flowey v 3 'param0' --update-from-stdin
        ${{ inputs.param0 != '' && inputs.param0 || 'false' }}
        EOF
        echo "$AgentTempDirNormal/used_artifacts/guide" | flowey v 3 'artifact_use_from_guide' --update-from-stdin --is-raw-string
        echo "$AgentTempDirNormal/used_artifacts/x64-linux-rustdoc" | flowey v 3 'artifact_use_from_x64-linux-rustdoc' --update-from-stdin --is-raw-string
        echo "$AgentTempDirNormal/used_artifacts/x64-windows-rustdoc" | flowey v 3 'artifact_use_from_x64-windows-rustdoc' --update-from-stdin --is-raw-string
      shell: bash
    - name: resolve guide artifact
      run: flowey e 3 flowey_lib_hvlite::artifact_guide::resolve 0
      shell: bash
    - name: resolve rustdocs artifact
      run: flowey e 3 flowey_lib_hvlite::artifact_rustdoc::resolve 1
      shell: bash
    - name: resolve rustdocs artifact
      run: flowey e 3 flowey_lib_hvlite::artifact_rustdoc::resolve 0
      shell: bash
    - name: generate consolidated gh pages html
      run: flowey e 3 flowey_lib_hvlite::_jobs::consolidate_and_publish_gh_pages 0
      shell: bash
    - name: 🌼 write_into Var
      run: flowey e 3 flowey_lib_hvlite::_jobs::consolidate_and_publish_gh_pages 1
      shell: bash
    - run: |
        flowey v 3 'flowey_lib_hvlite::_jobs::consolidate_and_publish_gh_pages:4:flowey_lib_hvlite/src/_jobs/consolidate_and_publish_gh_pages.rs:107:39' --write-to-gh-env floweyvar1 --is-raw-string
      shell: bash
      name: 🌼 Write to 'floweyvar1'
    - id: flowey_lib_hvlite___jobs__consolidate_and_publish_gh_pages__2
      uses: actions/upload-pages-artifact@v3
      with:
        path: ${{ env.floweyvar1 }}
      name: Upload pages artifact
    - id: flowey_lib_hvlite___jobs__consolidate_and_publish_gh_pages__3
      uses: actions/deploy-pages@v4
      name: Deploy to GitHub Pages
